package amyc
package codegen

import analyzer._
import ast.Identifier
import ast.SymbolicTreeModule.{Call => AmyCall, Div => AmyDiv, And => AmyAnd, Or => AmyOr, _}
import utils.{Context, Pipeline}
import wasm._
import Instructions._
import Utils._

// Generates WebAssembly code for an Amy program
object CodeGen extends Pipeline[(Program, SymbolTable), Module] {
  def run(ctx: Context)(v: (Program, SymbolTable)): Module = {
    val (program, table) = v

    // Generate code for an Amy module
    def cgModule(moduleDef: ModuleDef): List[Function] = {
      val ModuleDef(name, defs, optExpr) = moduleDef
      // Generate code for all functions
      defs.collect { case fd: FunDef if !builtInFunctions(fullName(name, fd.name)) =>
        cgFunction(fd, name, false)
      } ++
      // Generate code for the "main" function, which contains the module expression
      optExpr.toList.map { expr =>
        val mainFd = FunDef(Identifier.fresh("main"), Nil, TypeTree(IntType), expr)
        cgFunction(mainFd, name, true)
      }
    }

    // Generate code for a function in module 'owner'
    def cgFunction(fd: FunDef, owner: Identifier, isMain: Boolean): Function = {
      // Note: We create the wasm function name from a combination of
      // module and function name, since we put everything in the same wasm module.
      val name = fullName(owner, fd.name)
      Function(name, fd.params.size, isMain){ lh =>
        val locals = fd.paramNames.zipWithIndex.toMap
        val body = cgExpr(fd.body)(locals, lh)
        if (isMain) {
          body <:> Drop // Main functions do not return a value,
                        // so we need to drop the value generated by their body
        } else {
          body
        }
      }
    }

    // Generate code for an expression expr.
    // Additional arguments are a mapping from identifiers (parameters and variables) to
    // their index in the wasm local variables, and a LocalsHandler which will generate
    // fresh local slots as required.
    def cgExpr(expr: Expr)(implicit locals: Map[Identifier, Int], lh: LocalsHandler): Code = {
      expr match {
        case Variable(name) =>
          GetLocal(locals(name))
        case AmyCall(qname, args) =>
          table.getConstructor(qname) match {
            case Some(constrSig) =>
              val index = constrSig.index
              val oldMemAddress = lh.getFreshLocal()

              val argsCode: Code = for((arg,argIndex) <- args.zipWithIndex) yield {
                GetLocal(oldMemAddress) <:>
                  Const(4*argIndex+4) <:>
                  Add <:>
                  cgExpr(arg) <:>
                  Store
              }

              GetGlobal(Utils.memoryBoundary) <:>
              SetLocal(oldMemAddress) <:>
              GetGlobal(Utils.memoryBoundary) <:>
              Const((args.size + 1) * 4) <:>
              Add <:>
              SetGlobal(Utils.memoryBoundary) <:>
              GetLocal(oldMemAddress) <:>
              Const(index) <:>
              Store <:>
              argsCode <:>
              GetLocal(oldMemAddress)

            case None =>
              args.map(arg => cgExpr(arg)) <:> Call(Utils.fullName(table.getFunction(qname).get.owner, qname))
          }

        case Sequence(e1, e2) =>
          cgExpr(e1) <:> Drop <:> cgExpr(e2)

        case Let(df, value, body) =>
          val address = lh.getFreshLocal()
          cgExpr(value) <:> SetLocal(address) <:> cgExpr(body)(locals + (df.name -> address), lh)

        case Ite(cond, thenn, elze) =>
          cgExpr(cond) <:> If_i32 <:> cgExpr(thenn) <:> Else <:> cgExpr(elze) <:> End

        case Match(scrut, cases) =>
          def matchAndBind(expectedCode: Code, casePattern: Pattern): (Code, Map[Identifier, Int]) = {
            casePattern match {
              case WildcardPattern() =>
                (expectedCode <:> Drop <:> Const(1), locals)
              case IdPattern(name) =>
                val binding = lh.getFreshLocal()
                (expectedCode <:> SetLocal(binding) <:> Const(1), locals + (name -> binding))
              case LiteralPattern(literal) => (expectedCode <:> cgExpr(literal) <:> Eq, locals)
              case CaseClassPattern(constr, args) =>
                val constrIdx = lh.getFreshLocal()
                val generatedCode =
                  (args.zipWithIndex).map(pair => matchAndBind(GetLocal(constrIdx) <:> Utils.adtField(pair._2) <:> Load, pair._1))
                val newLocals = locals ++
                  generatedCode.map(_._2).foldLeft(Map[Identifier, Int]())((m1: Map[Identifier, Int], m2: Map[Identifier, Int]) => m1 ++ m2)


                if (args.isEmpty) {
                   (expectedCode <:>
                    SetLocal(constrIdx) <:>
                    GetLocal(constrIdx) <:>
                    Load <:>
                    Const(table.getConstructor(constr).get.index) <:>
                    Eq <:>
                    If_i32 <:>
                    Const(1) <:>
                    Else <:> Const(0) <:> End, newLocals)
                }
                else if (args.lengthCompare(1) == 0) {
                   (expectedCode <:>
                    SetLocal(constrIdx) <:>
                    GetLocal(constrIdx) <:>
                    Load <:>
                    Const(table.getConstructor(constr).get.index) <:>
                    Eq <:>
                    If_i32 <:>
                    generatedCode.map(_._1) <:>
                    Else <:> Const(0) <:> End, newLocals)
                }
                else {
                   (expectedCode <:>
                    SetLocal(constrIdx) <:>
                    GetLocal(constrIdx) <:>
                    Load <:>
                    Const(table.getConstructor(constr).get.index) <:>
                    Eq <:>
                    If_i32 <:>
                    generatedCode.map(_._1) <:> args.tail.map(arg => And) <:>
                    Else <:> Const(0) <:> End, newLocals)
                }
            }
          }

          val scrutLocal = lh.getFreshLocal()
          val caseCodeAndMappingList: List[(MatchCase, (Code, Map[Identifier, Int]))] = cases.map(cse => (cse, matchAndBind(GetLocal(scrutLocal), cse.pat)))

          cgExpr(scrut) <:> SetLocal(scrutLocal) <:>
          caseCodeAndMappingList.map(pair => pair._2._1 <:> If_i32 <:> cgExpr(pair._1.expr)(pair._2._2, lh) <:> Else) <:>
          mkString("Match error!") <:> Call("Std_printString") <:> Unreachable <:>
          cases.map(cse => End)

        case IntLiteral(value) =>
          Const(value)
        case BooleanLiteral(value) =>
          if (value)
            Const(1)
          else
            Const(0)
        case StringLiteral(value) =>
          mkString(value)
        case UnitLiteral() =>
          Const(0)

        case Plus(lhs, rhs) =>
          cgExpr(lhs) <:> cgExpr(rhs) <:> Add
        case Minus(lhs, rhs) =>
          cgExpr(lhs) <:> cgExpr(rhs) <:> Sub
        case Times(lhs, rhs) =>
          cgExpr(lhs) <:> cgExpr(rhs) <:> Mul
        case AmyDiv(lhs, rhs) =>
          cgExpr(lhs) <:> cgExpr(rhs) <:> Div
        case Mod(lhs, rhs) =>
          cgExpr(lhs) <:> cgExpr(rhs) <:> Rem
        case LessThan(lhs, rhs) =>
          cgExpr(lhs) <:> cgExpr(rhs) <:> Lt_s
        case LessEquals(lhs, rhs) =>
          cgExpr(lhs) <:> cgExpr(rhs) <:> Le_s
        case AmyAnd(lhs, rhs) =>
          cgExpr(lhs) <:> If_i32 <:> cgExpr(rhs) <:> Else <:> Const(0) <:> End
        case AmyOr(lhs, rhs) =>
          cgExpr(lhs) <:> If_i32 <:> Const(1) <:> Else <:> cgExpr(rhs) <:> End
        case Equals(lhs, rhs) =>
          cgExpr(lhs) <:> cgExpr(rhs) <:> Eq
        case Concat(lhs, rhs) =>
          cgExpr(lhs) <:> cgExpr(rhs) <:> Call(concatImpl.name)

        case Not(e) =>
          cgExpr(e) <:> Eqz
        case Neg(e) =>
          Const(0) <:> cgExpr(e) <:> Sub

        case Error(msg) =>
          cgExpr(StringLiteral("Error: ")) <:>
            cgExpr(msg) <:>
            Call(concatImpl.name) <:>
            Call("Std_printString") <:>
            Instructions.Unreachable
      }
    }

    Module(
      program.modules.last.name.name,
      defaultImports,
      globalsNo,
      wasmFunctions ++ (program.modules flatMap cgModule)
    )

  }
}
